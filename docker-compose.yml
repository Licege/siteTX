version: '3'
services:
#  db:
#    image: postgres:latest
#    container_name: postgres
#    ports:
#      - "5432:5432"
#    volumes:
#      - ./db/pg_data:/var/lib/postgresql/data/pgdata
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: 5315
#      POSTGRES_DB: trixolma
#      PGDATA: /var/lib/postgresql/data/pgdata
#    restart: always

  db:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./db/pg_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 5315
      POSTGRES_DB: trixolma
      PGDATA: /var/lib/postgresql/data
    restart: always

  backend_image: &default
    container_name: backend_trixolma
    build:
      context: ./server
      dockerfile: Dockerfile
    command: bash
    env_file:
      - ./server/.env
    links:
      - db

  api_service:
    container_name: api_service
    <<: *default
    command: npm run start
    ports:
      - "9090:9090"
    restart: always
    volumes:
      - ./server/uploads:/var/www/app/serverNodeTX/uploads
    environment:
      - DEFAULT_EXECUTION_MODE=service
      - DB_HOST=db
      - TRIXOLMA_BASE_DOMAIN=.tri-xolma.ru
      - STORAGE_SRC=http://files.tri-xolma.ru

  api_auth:
    container_name: api_auth
    <<: *default
    command: npm run start
    ports:
      - "9092:9092"
    restart: always
    environment:
      - DEFAULT_EXECUTION_MODE=authorization
      - DB_HOST=db
      - TRIXOLMA_BASE_DOMAIN=.tri-xolma.ru

#  migration:
#    image: sitetx_api_service
#    command: ["./wait-for-it/wait-for-it.sh", "api_service:9090", "--", "sequelize", "db:migrate"]
#    environment:
#      - DB_NAME=trixolma
#    links:
#      - api_service
#      - api_auth

#  site:
#    container_name: site
#    build:
#      context: ./site
#      dockerfile: ./Dockerfile
#    ports:
#      - "3000:3000"

#  dashboard:
#    build:
#      context: ./dashboard
#      dockerfile: Dockerfile
#    container_name: dashboard
#    ports:
#      - "3001:3001"
#    links:
#      - api_auth
#      - api_service

  nginx:
    container_name: nginx
    build: ./nginx/prod
    volumes:
      - ./dashboard/build:/var/www/app/dashboard
      - ./site/build/:/var/www/app/site
    restart: always
    ports:
      - 80:80
      - 443:443
    links:
      - api_auth
      - api_service
    entrypoint: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\""

  certbot:
    container_name: service_certbot
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
